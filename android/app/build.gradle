plugins {
    id "com.android.application"
    id 'com.google.gms.google-services'
    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "br.com.ccortez.mobx_mvvm"
    compileSdk = flutter.compileSdkVersion
//    ndkVersion = flutter.ndkVersion
    ndkVersion "25.1.8937393"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    kotlin {
        jvmToolchain(17)
    }
    java {
//        sourceCompatibility = JavaVersion.VERSION_17
//        targetCompatibility = JavaVersion.VERSION_17
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    buildFeatures {
        android.buildFeatures.buildConfig true
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "br.com.ccortez.mobx_mvvm"

        println "BuildInfo: localProperties.flutterVersionCode:  ${localProperties.getProperty('flutter.versionCode')}"
        println "BuildInfo: localProperties.flutterVersionName:  ${localProperties.getProperty('flutter.versionName')}"
        println "BuildInfo: flutterVersionCode:  ${flutterVersionCode}"
        println "BuildInfo: flutterVersionName:  ${flutterVersionName}"

        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        minSdkVersion 28
//        versionCode = flutterVersionCode.toInteger()
//        versionName = flutterVersionName
        versionCode 10010
        versionName "1.0.010-internal"

        ndk {
            debugSymbolLevel 'FULL' // Inclui símbolos de depuração completos.
        }
    }

    task decodeKeystore {
        def encodedKeystore = System.getenv("KEYSTORE_BASE64")
        try {
//            def decodedKeystoreBytes = Base64.decodeBase64(encodedKeystore)
            def decodedKeystoreBytes = Base64.getDecoder().decode(encodedKeystore.toString())
            // Save the decoded keystore bytes to a temporary file
            def tempFile = File.createTempFile("decoded_keystore", ".jks")
            //        tempFile.writeBytes(decodedKeystoreBytes)
            FileUtils.writeByteArrayToFile(tempFile, decodedKeystoreBytes);

            // Use the temporary file with storeFile
            signingConfigs {
                release {
                    if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
                        storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
                        storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
                        keyAlias System.getenv()["CM_KEY_ALIAS"]
                        keyPassword System.getenv()["CM_KEY_PASSWORD"]
                    } else {
                        storeFile file(tempFile.absolutePath)

                        // ... other signing configuration details
                        storePassword System.getenv("KEYSTORE_PASSWORD")
                        keyAlias System.getenv("KEY_ALIAS")
                        keyPassword System.getenv("KEY_PASSWORD")
                    }
                }
            }
        } catch (IllegalArgumentException e) {
            println "Invalid base64 encoding: ${e.message}"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-debug.pro'

            signingConfig signingConfigs.debug

            debuggable true
        }
        release {
            minifyEnabled false // Disable obfuscation for debugging
            shrinkResources false // Disable obfuscation for debugging
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release

            // Access the environment variable passed as an argument
            def firebaseApiKey = System.getenv('FIREBASE_API_KEY')
            def firebaseAppID = System.getenv('FIREBASE_APP_ID')
            def firebaseMessagingSenderID = System.getenv('FIREBASE_MESSAGING_SENDER_ID')
            def keystorePassword = System.getenv('KEYSTORE_PASSWORD')
            def keyAlias = System.getenv('KEY_ALIAS')
            def keyPassword = System.getenv('KEY_PASSWORD')
            def keyStoreBase64 = System.getenv('KEYSTORE_BASE64')

            // Access the environment variable
            buildConfigField "String", "FIREBASE_API_KEY", "\"$firebaseApiKey\""
            buildConfigField "String", "FIREBASE_APP_ID", "\"$firebaseAppID\""
            buildConfigField "String", "FIREBASE_MESSAGING_SENDER_ID", "\"$firebaseMessagingSenderID\""
            buildConfigField "String", "KEYSTORE_PASSWORD", "\"$keystorePassword\""
            buildConfigField "String", "KEY_ALIAS", "\"$keyAlias\""
            buildConfigField "String", "KEY_PASSWORD", "\"$keyPassword\""
            buildConfigField "String", "KEYSTORE_BASE64", "\"$keyStoreBase64\""

            // Temporarily set debuggable to true for debugging
            debuggable false

            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'libs'
            }
        }
    }
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace = project.group.toString()  // Set namespace as fallback
                }
                project.tasks.whenTaskAdded { task ->
                    if (task.name.contains('processDebugManifest') || task.name.contains('processReleaseManifest')) {
                        task.doFirst {
                            File manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
                            if (manifestFile.exists()) {
                                String manifestContent = manifestFile.text
                                if (manifestContent.contains('package=')) {
                                    manifestContent = manifestContent.replaceAll(/package="[^"]*"/, "")
                                    manifestFile.write(manifestContent)
                                    println "Removed 'package' attribute from ${manifestFile}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:33.7.0')

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation("com.google.firebase:firebase-crashlytics")
    implementation("com.google.firebase:firebase-analytics")

    implementation("com.squareup.okhttp3:okhttp:4.9.3")

    // TODO: Add the dependencies for Firebase products you want to use
    // When using the BoM, don't specify versions in Firebase dependencies
    // https://firebase.google.com/docs/android/setup#available-libraries
}

flutter {
    source = "../.."
}

import org.apache.commons.io.FileUtils
